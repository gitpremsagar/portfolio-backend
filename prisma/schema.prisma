// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// For using postgres as a database
// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// For using sqlite as a database
// datasource db {
//   provider = "sqlite"
//   url      = "file:./dev.db"
// }

// // for using mysql as a database
// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_URL")
// }

// for using mongodb as a database
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// model for projects to show on portfolio
model Project {
  projectId              String       @id @default(uuid()) @map("_id")
  projectPosition        Int          @default(0)
  projectName            String
  projectDescription     String
  projectLiveLink        String
  frontendCodeLink       String
  backendCodeLink        String
  projectImageLink       String
  projectMockupImageLink String
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
  technologyIDs          String[]
  technologies           Technology[] @relation(fields: [technologyIDs], references: [technologyId])
}

model Technology {
  technologyId          String    @id @default(uuid()) @map("_id")
  technologyName        String
  technologyDescription String
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  projectIDs            String[]
  projects              Project[] @relation(fields: [projectIDs], references: [projectId])
}

model Message {
  messageId           String   @id @default(uuid()) @map("_id")
  message             String
  senderEmail         String
  senderName          String
  senderContactNumber String
  sentAt              DateTime @default(now())
}

model User {
  userId    String   @id @default(uuid()) @map("_id")
  firstName String
  lastName  String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Blog {
  blogId        String    @id @default(uuid()) @map("_id")
  blogTitle     String
  blogContent   String
  blogImage     String
  blogCategory  String
  blogTagsIDs   String[]
  blogTags      BlogTag[] @relation(fields: [blogTagsIDs], references: [blogTagId])
  blogCreatedAt DateTime  @default(now())
  blogUpdatedAt DateTime  @updatedAt
  blogComments  Comment[]
}

model Comment {
  commentId        String   @id @default(uuid()) @map("_id")
  commentContent   String
  commentAuthor    String
  commentCreatedAt DateTime @default(now())
  blog             Blog     @relation(fields: [blogId], references: [blogId])
  blogId           String
}

model BlogTag {
  blogTagId          String   @id @default(uuid()) @map("_id")
  blogTagName        String
  blogTagDescription String
  blogTagCreatedAt   DateTime @default(now())
  blogTagUpdatedAt   DateTime @updatedAt
  blogIDs            String[]
  blogs              Blog[]   @relation(fields: [blogIDs], references: [blogId])
}
